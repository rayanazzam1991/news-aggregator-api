{
    "openapi": "3.0.0",
    "info": {
        "title": "News Aggregator OpenApi",
        "description": "Test your Apis with a full documentation.",
        "contact": {
            "email": "rayanwork2014@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/v1/articles/show/{id}": {
            "get": {
                "tags": [
                    "Articles"
                ],
                "summary": "Get article details by ID",
                "description": "This endpoint returns the details of a specific article based on its ID.",
                "operationId": "getArticleDetails",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the article to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/ArticleDetailsResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Article not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Article not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/articles/list": {
            "post": {
                "tags": [
                    "Articles"
                ],
                "summary": "Get a list of articles with optional filters",
                "description": "This endpoint returns a paginated list of articles based on optional filters such as keywords, date, category, author, and source.",
                "operationId": "getArticlesList",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "keywords": {
                                        "description": "Array of keywords to search for in articles.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "date": {
                                        "description": "Filter articles by date in YYYY-MM-DD format.",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-10-18"
                                    },
                                    "category_id": {
                                        "description": "Filter articles by category ID.",
                                        "type": "integer"
                                    },
                                    "author_id": {
                                        "description": "Filter articles by author ID.",
                                        "type": "integer"
                                    },
                                    "source_id": {
                                        "description": "Filter articles by source ID.",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A list of articles with pagination metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ArticlesListResource"
                                            }
                                        },
                                        "pagination": {
                                            "$ref": "#/components/schemas/PaginationResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": [
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "property": null
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/authors": {
            "get": {
                "tags": [
                    "Authors"
                ],
                "summary": "Get list of authors",
                "description": "Retrieve a paginated list of all authors.",
                "operationId": "getAuthorsList",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AuthorsListResource"
                                            }
                                        },
                                        "pagination": {
                                            "$ref": "#/components/schemas/PaginationResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Authors"
                ],
                "summary": "Create a new author",
                "description": "Create a new author with a specified name.",
                "operationId": "createAuthor",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the author",
                                        "type": "string",
                                        "example": "Technology"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Author created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Author created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/authors/{id}": {
            "put": {
                "tags": [
                    "Authors"
                ],
                "summary": "Update an existing author",
                "description": "Update the name or status of a author by its ID.",
                "operationId": "updateAuthor",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Author ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the author",
                                        "type": "string",
                                        "example": "New Author Name",
                                        "nullable": true
                                    },
                                    "status": {
                                        "description": "Status of the author",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Author updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Author updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Author not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Authors"
                ],
                "summary": "Delete a author",
                "description": "Delete a author by its ID.",
                "operationId": "deleteAuthor",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Author ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Author deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Author deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Author not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get list of categories",
                "description": "Retrieve a paginated list of all categories.",
                "operationId": "getCategoriesList",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CategoriesListResource"
                                            }
                                        },
                                        "pagination": {
                                            "$ref": "#/components/schemas/PaginationResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "description": "Create a new category with a specified name.",
                "operationId": "createCategory",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the category",
                                        "type": "string",
                                        "example": "Technology"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/categories/{id}": {
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update an existing category",
                "description": "Update the name or status of a category by its ID.",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the category",
                                        "type": "string",
                                        "example": "New Category Name",
                                        "nullable": true
                                    },
                                    "status": {
                                        "description": "Status of the category",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category",
                "description": "Delete a category by its ID.",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/sources": {
            "get": {
                "tags": [
                    "Sources"
                ],
                "summary": "Get list of sources",
                "description": "Retrieve a paginated list of all sources.",
                "operationId": "getSourcesList",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SourcesListResource"
                                            }
                                        },
                                        "pagination": {
                                            "$ref": "#/components/schemas/PaginationResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Sources"
                ],
                "summary": "Create a new source",
                "description": "Create a new source with a specified name.",
                "operationId": "createSource",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the source",
                                        "type": "string",
                                        "example": "Technology"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Source created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Source created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/sources/{id}": {
            "put": {
                "tags": [
                    "Sources"
                ],
                "summary": "Update an existing source",
                "description": "Update the name or status of a source by its ID.",
                "operationId": "updateSource",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Source ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the source",
                                        "type": "string",
                                        "example": "New Source Name",
                                        "nullable": true
                                    },
                                    "status": {
                                        "description": "Status of the source",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Source updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Source updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Source not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Sources"
                ],
                "summary": "Delete a source",
                "description": "Delete a source by its ID.",
                "operationId": "deleteSource",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Source ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Source deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Source deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Source not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login a user",
                "description": "Handles user login",
                "operationId": "loginUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "P@ssword123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginUserResource"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "Handles the registration of a new user, validating the input data",
                "operationId": "registerUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "The name of the user",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "description": "The email address of the user",
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "description": "The password for the user, must meet security requirements",
                                        "type": "string",
                                        "format": "password",
                                        "example": "P@ssword123"
                                    },
                                    "password_confirmation": {
                                        "description": "Password confirmation",
                                        "type": "string",
                                        "format": "password",
                                        "example": "P@ssword123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Registration successful"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The name field is required."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An error occurred during registration."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout a user",
                "description": "Logs out the authenticated user by invalidating their token.",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logout successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/auth/forget_password": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Send password reset link",
                "description": "Send a password reset link to the user's email",
                "operationId": "sendResetLinkEmail",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset email sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "An Email with token sent successfully"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/auth/reset_password": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset password",
                "description": "Resets the password for the user using the reset token sent via email",
                "operationId": "resetPassword",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "token",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "token": {
                                        "type": "string",
                                        "example": "reset-token-string"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "newP@ssword123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "newP@ssword123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Password Reset successfully"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error or invalid token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The provided token is invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                },
                                                "password": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The password must be at least 8 characters."
                                                    }
                                                },
                                                "token": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The provided token is invalid."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/userPreferences/feed": {
            "get": {
                "tags": [
                    "User News Feed"
                ],
                "summary": "Fetch user-specific news feed",
                "description": "Retrieve a paginated list of news articles based on the user's preferences.",
                "operationId": "getUserNewsFeed",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "The ID of the user whose news feed is being fetched.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User news feed successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "result": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserPreferenceFeedListResource"
                                            }
                                        },
                                        "paginate": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 100
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 10
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An internal error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/userPreferences/list": {
            "post": {
                "tags": [
                    "User Preferences"
                ],
                "summary": "Get list of user preferences",
                "description": "Returns a paginated list of user preferences for a given user.",
                "operationId": "listUserPreferences",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "user_id"
                                ],
                                "properties": {
                                    "user_id": {
                                        "description": "ID of the user",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "result": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserPreferencesListResource"
                                            }
                                        },
                                        "paginate": {
                                            "$ref": "#/components/schemas/PaginationResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/userPreferences": {
            "post": {
                "tags": [
                    "User Preferences"
                ],
                "summary": "Store a user preference",
                "description": "Creates a new user preference with a specified type and value",
                "operationId": "storeUserPreference",
                "requestBody": {
                    "description": "User preference details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "user_id",
                                    "preference_id",
                                    "preference_type"
                                ],
                                "properties": {
                                    "user_id": {
                                        "description": "ID of the user",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "preference_id": {
                                        "description": "ID of the preference",
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "preference_type": {
                                        "description": "Type of the preference",
                                        "type": "string",
                                        "example": "category"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "UserPreference created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "UserPreference created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ArticleDetailsResource": {
                "title": "Article Details Resource",
                "description": "Full details of an article",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the article.",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "Title of the article.",
                        "type": "string",
                        "example": "Breaking News: Major Update in Technology"
                    },
                    "source": {
                        "description": "Source of the article.",
                        "type": "string",
                        "example": "TechCrunch"
                    },
                    "category": {
                        "description": "Category of the article.",
                        "type": "string",
                        "example": "Technology",
                        "nullable": true
                    },
                    "author": {
                        "description": "Author of the article.",
                        "type": "string",
                        "example": "John Doe",
                        "nullable": true
                    },
                    "key_words": {
                        "description": "Keywords associated with the article.",
                        "type": "string",
                        "example": "AI, Technology, Innovation",
                        "nullable": true
                    },
                    "summary": {
                        "description": "Short summary of the article.",
                        "type": "string",
                        "example": "This article discusses the latest advancements in AI technology.",
                        "nullable": true
                    },
                    "image_url": {
                        "description": "URL of the article's cover image.",
                        "type": "string",
                        "example": "https://example.com/images/article1.jpg",
                        "nullable": true
                    },
                    "news_url": {
                        "description": "URL to the full article.",
                        "type": "string",
                        "example": "https://example.com/full-article",
                        "nullable": true
                    },
                    "meta": {
                        "description": "Meta information about the article.",
                        "properties": {
                            "views": {
                                "description": "Number of views the article has received.",
                                "type": "integer",
                                "example": 123
                            },
                            "likes": {
                                "description": "Number of likes the article has received.",
                                "type": "integer",
                                "example": 45
                            }
                        },
                        "type": "object",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "ArticlesListResource": {
                "title": "Articles List Resource",
                "description": "Minimal details of articles in the list view",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the article.",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "Title of the article.",
                        "type": "string",
                        "example": "Breaking News: Major Update in Technology"
                    },
                    "source": {
                        "description": "Source of the article.",
                        "type": "string",
                        "example": "TechCrunch"
                    },
                    "category": {
                        "description": "Category of the article.",
                        "type": "string",
                        "example": "Technology",
                        "nullable": true
                    },
                    "author": {
                        "description": "Author of the article.",
                        "type": "string",
                        "example": "John Doe",
                        "nullable": true
                    },
                    "summary": {
                        "description": "Short summary of the article.",
                        "type": "string",
                        "example": "This article discusses the latest advancements in AI technology.",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "AuthorDetailsResource": {
                "title": "Author Details Resource",
                "description": "Full details of an author.",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the author.",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the author.",
                        "type": "string",
                        "example": "John Doe"
                    }
                },
                "type": "object"
            },
            "AuthorsListResource": {
                "title": "Authors List Resource",
                "description": "A minimal representation of an author for listing purposes.",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the author.",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the author.",
                        "type": "string",
                        "example": "John Doe"
                    }
                },
                "type": "object"
            },
            "CategoriesListResource": {
                "title": "Categories List Resource",
                "description": "A minimal representation of a category for listing purposes.",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the category.",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the category.",
                        "type": "string",
                        "example": "Technology"
                    }
                },
                "type": "object"
            },
            "CategoryDetailsResource": {
                "title": "Category Details Resource",
                "description": "Full details of a category.",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the category.",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the category.",
                        "type": "string",
                        "example": "Technology"
                    }
                },
                "type": "object"
            },
            "SourceDetailsResource": {
                "title": "Source Details Resource",
                "description": "Full details of a source.",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the source.",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the source.",
                        "type": "string",
                        "example": "BBC News"
                    }
                },
                "type": "object"
            },
            "SourcesListResource": {
                "title": "Source List Resource",
                "description": "Basic details of a source.",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the source.",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the source.",
                        "type": "string",
                        "example": "New York Times"
                    }
                },
                "type": "object"
            },
            "LoginUserResource": {
                "properties": {
                    "user": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "John Doe"
                            },
                            "email": {
                                "type": "string",
                                "format": "email",
                                "example": "john@example.com"
                            }
                        },
                        "type": "object"
                    },
                    "token": {
                        "type": "string",
                        "example": "some-jwt-token"
                    }
                },
                "type": "object"
            },
            "UserPreferenceFeedListResource": {
                "title": "User Preference Feed List Resource",
                "description": "Represents a news article based on user preferences",
                "properties": {
                    "id": {
                        "description": "ID of the article",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "Title of the article",
                        "type": "string",
                        "example": "Breaking News: Major Event Happening Now"
                    },
                    "source": {
                        "description": "Name of the article source",
                        "type": "string",
                        "example": "New York Times"
                    },
                    "author": {
                        "description": "Name of the author",
                        "type": "string",
                        "example": "John Doe",
                        "nullable": true
                    },
                    "category": {
                        "description": "Category of the article",
                        "type": "string",
                        "example": "World News",
                        "nullable": true
                    },
                    "key_words": {
                        "description": "Array of keywords related to the article",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "breaking,world,event"
                        }
                    }
                },
                "type": "object"
            },
            "UserPreferencesListResource": {
                "title": "User Preferences List Resource",
                "description": "Represents a user preference with type and value",
                "properties": {
                    "id": {
                        "description": "ID of the preference",
                        "type": "integer",
                        "example": 1
                    },
                    "preference_type_name": {
                        "description": "Type name of the preference",
                        "type": "string",
                        "example": "category"
                    },
                    "preference_value": {
                        "description": "Value of the preference",
                        "type": "string",
                        "example": "Technology"
                    }
                },
                "type": "object"
            },
            "PaginationResource": {
                "title": "Pagination Resource",
                "description": "Pagination details for paginated API responses.",
                "properties": {
                    "total": {
                        "description": "Total number of items available.",
                        "type": "integer",
                        "example": 100
                    },
                    "count": {
                        "description": "Number of items on the current page.",
                        "type": "integer",
                        "example": 10
                    },
                    "per_page": {
                        "description": "Number of items per page.",
                        "type": "integer",
                        "example": 10
                    },
                    "page": {
                        "description": "Current page number.",
                        "type": "integer",
                        "example": 1
                    },
                    "max_page": {
                        "description": "Maximum number of pages available.",
                        "type": "integer",
                        "example": 10
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "sanctum": {
                "type": "apiKey",
                "description": "Enter token in format (Bearer <token>)",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Articles",
            "description": "Articles"
        },
        {
            "name": "Authors",
            "description": "Authors"
        },
        {
            "name": "Categories",
            "description": "Categories"
        },
        {
            "name": "Sources",
            "description": "Sources"
        },
        {
            "name": "Authentication",
            "description": "Authentication"
        },
        {
            "name": "User News Feed",
            "description": "User News Feed"
        },
        {
            "name": "User Preferences",
            "description": "User Preferences"
        }
    ]
}